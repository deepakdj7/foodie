{"version":3,"sources":["webpack:///./src/templates/blog-list.tsx"],"names":["BlogIndex","data","location","pageContext","siteTitle","site","siteMetadata","title","allPosts","allMarkdownRemark","edges","useState","filteredData","query","state","setState","posts","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","image","className","type","aria-label","placeholder","onChange","event","target","value","filter","post","node","frontmatter","description","toLowerCase","includes","map","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","listStyle","padding","rel","pageQuery"],"mappings":"2FAAA,0HAmJeA,UAjHG,SAAC,GAIiB,IAHlCC,EAGkC,EAHlCA,KACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,YAEMC,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAWP,EAAKQ,kBAAkBC,MAFN,EAKRC,mBAAS,CACjCC,aAAc,GACdC,MAHiB,KACZC,EAL2B,KAKpBC,EALoB,KAwB1BH,EAAwBE,EAAxBF,aAAcC,EAAUC,EAAVD,MAEhBG,EADmBJ,GArBN,KAqBsBC,EACRD,EAAeJ,EAExCS,EAA0Bd,EAA1Bc,YAEFC,EAA0B,IAAhBD,EACVE,EAASF,IAHmBd,EAAbiB,SAIfC,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,CAAQpB,SAAUA,EAAUK,MAAOH,EAAWoB,MAAM,eAClD,kBAAC,IAAD,CAAKjB,MAAM,cACX,yBAAKkB,UAAU,cACb,2BACEA,UAAU,eACVC,KAAK,OACLC,aAAW,SACXC,YAAY,mBACZC,SAnCkB,SAAAC,GACxB,IAAMjB,EAAQiB,EAAMC,OAAOC,MAErBpB,GADQX,EAAKQ,kBAAkBC,OAAS,IACnBuB,QAAO,SAAAC,GAAQ,MACTA,EAAKC,KAAKC,YAAjCC,EADgC,EAChCA,YAAa9B,EADmB,EACnBA,MACrB,OACE8B,EAAYC,cAAcC,SAAS1B,EAAMyB,gBACzC/B,EAAM+B,cAAcC,SAAS1B,EAAMyB,kBAGvCvB,EAAS,CACPF,QACAD,qBA0BCI,EAAMwB,KAAI,YAAc,IAAXL,EAAW,EAAXA,KACN5B,EAAQ4B,EAAKC,YAAY7B,OAAS4B,EAAKM,OAAOC,KACpD,OAKI,6BAASjB,UAAU,eAAekB,IAAKR,EAAKM,OAAOC,MACjD,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIb,EAAKM,OAAOC,MACjDnC,IAGL,+BAAQ4B,EAAKC,YAAYa,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQhB,EAAKC,YAAYC,aAAeF,EAAKiB,gBAS3D,6BACE,wBACER,MAAO,CACLS,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,6BACIvC,GACA,kBAAC,OAAD,CAAM8B,GAAI3B,EAAUqC,IAAI,QAAxB,oBAKJ,6BACIvC,GACA,kBAAC,OAAD,CAAM6B,GAAIzB,EAAUmC,IAAI,QAAxB,oBAaP,IAAMC,EAAY","file":"component---src-templates-blog-list-tsx-d597ea751b1293518b05.js","sourcesContent":["// Gatsby supports TypeScript natively!\nimport React, { useState } from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype PageContext = {\n  currentPage: number\n  numPages: number\n}\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({\n  data,\n  location,\n  pageContext,\n}: PageProps<Data, PageContext>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const allPosts = data.allMarkdownRemark.edges\n\n  const emptyQuery = \"\"\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n  const handleInputChange = event => {\n    const query = event.target.value\n    const posts = data.allMarkdownRemark.edges || []\n    const filteredData = posts.filter(post => {\n      const { description, title } = post.node.frontmatter\n      return (\n        description.toLowerCase().includes(query.toLowerCase()) ||\n        title.toLowerCase().includes(query.toLowerCase())\n      )\n    })\n    setState({\n      query,\n      filteredData,\n    })\n  }\n  const { filteredData, query } = state\n  const hasSearchResults = filteredData && query !== emptyQuery\n  const posts = hasSearchResults ? filteredData : allPosts\n\n  const { currentPage, numPages } = pageContext\n\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/\" : (currentPage - 1).toString()\n  const nextPage = (currentPage + 1).toString()\n\n  return (\n    <Layout location={location} title={siteTitle} image=\"default.jpg\">\n      <SEO title=\"All posts\" />\n      <div className=\"search-box\">\n        <input\n          className=\"search-input\"\n          type=\"text\"\n          aria-label=\"Search\"\n          placeholder=\"Start cooking...\"\n          onChange={handleInputChange}\n        />\n      </div>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          /*<div className=\"list-item\" key={node.fields.slug} >\n            <div className=\"list-image\" style={{backgroundImage: 'url(' + node.frontmatter.image.feature + ')'}}>\n\n            </div>*/\n            <article className=\"list-article\" key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n            </article>\n         /* </div> */\n        )\n      })}\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {!isFirst && (\n              <Link to={prevPage} rel=\"prev\">\n                ← Previous Page\n              </Link>\n            )}\n          </li>\n          <li>\n            {!isLast && (\n              <Link to={nextPage} rel=\"next\">\n                Next Page →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}